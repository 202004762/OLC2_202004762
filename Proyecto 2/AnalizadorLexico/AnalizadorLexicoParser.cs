//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AnalizadorLexico.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Proyecto_1.AnalizadorLexico {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class AnalizadorLexicoParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, LINEA=44, MULTILINEA=45, 
		NEWLINE=46, INT=47, DECIMAL=48, CADENA=49, CARACTER=50, BOOL=51, NIL=52, 
		ID=53, IGUAL=54, DPIGUAL=55, PARIZQ=56, PARDER=57, LLAVEIZQ=58, LLAVEDER=59, 
		CORIZQ=60, CORDER=61, COMA=62, INCRE=63, DECRE=64;
	public const int
		RULE_inicio = 0, RULE_listaInstr = 1, RULE_instruccion = 2, RULE_print = 3, 
		RULE_declaracionVariable = 4, RULE_declaracionSlice = 5, RULE_asignacion = 6, 
		RULE_tipo = 7, RULE_instruccion_if = 8, RULE_instruccion_ifelse = 9, RULE_instruccion_else = 10, 
		RULE_instruccion_switch = 11, RULE_lista_case = 12, RULE_instruccion_case = 13, 
		RULE_instruccion_default = 14, RULE_instruccion_for = 15, RULE_instruccion_funcion = 16, 
		RULE_llamada_funcion = 17, RULE_lista_parametros = 18, RULE_lista_argumentos = 19, 
		RULE_breakInstr = 20, RULE_continueInstr = 21, RULE_returnInstr = 22, 
		RULE_expr = 23;
	public static readonly string[] ruleNames = {
		"inicio", "listaInstr", "instruccion", "print", "declaracionVariable", 
		"declaracionSlice", "asignacion", "tipo", "instruccion_if", "instruccion_ifelse", 
		"instruccion_else", "instruccion_switch", "lista_case", "instruccion_case", 
		"instruccion_default", "instruccion_for", "instruccion_funcion", "llamada_funcion", 
		"lista_parametros", "lista_argumentos", "breakInstr", "continueInstr", 
		"returnInstr", "expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'fmt.Println'", "'var'", "'+='", "'-='", "'append'", "'int'", "'float64'", 
		"'string'", "'bool'", "'rune'", "'if'", "'else'", "'switch'", "'case'", 
		"':'", "'default'", "'for'", "';'", "'range'", "'func'", "'break'", "'continue'", 
		"'return'", "'!'", "'-'", "'*'", "'/'", "'%'", "'+'", "'>='", "'>'", "'<='", 
		"'<'", "'=='", "'!='", "'&&'", "'||'", "'slices.Index'", "'strings.Join'", 
		"'len'", "'strconv.Atoi'", "'strconv.ParseFloat'", "'reflect.TypeOf'", 
		null, null, null, null, null, null, null, null, "'nil'", null, "'='", 
		"':='", "'('", "')'", "'{'", "'}'", "'['", "']'", "','", "'++'", "'--'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "LINEA", "MULTILINEA", 
		"NEWLINE", "INT", "DECIMAL", "CADENA", "CARACTER", "BOOL", "NIL", "ID", 
		"IGUAL", "DPIGUAL", "PARIZQ", "PARDER", "LLAVEIZQ", "LLAVEDER", "CORIZQ", 
		"CORDER", "COMA", "INCRE", "DECRE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AnalizadorLexico.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AnalizadorLexicoParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AnalizadorLexicoParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AnalizadorLexicoParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InicioContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListaInstrContext listaInstr() {
			return GetRuleContext<ListaInstrContext>(0);
		}
		public InicioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inicio; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterInicio(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitInicio(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInicio(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InicioContext inicio() {
		InicioContext _localctx = new InicioContext(Context, State);
		EnterRule(_localctx, 0, RULE_inicio);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			listaInstr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListaInstrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstruccionContext[] instruccion() {
			return GetRuleContexts<InstruccionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstruccionContext instruccion(int i) {
			return GetRuleContext<InstruccionContext>(i);
		}
		public ListaInstrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listaInstr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterListaInstr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitListaInstr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListaInstr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListaInstrContext listaInstr() {
		ListaInstrContext _localctx = new ListaInstrContext(Context, State);
		EnterRule(_localctx, 2, RULE_listaInstr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			instruccion();
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9007199270610950L) != 0)) {
				{
				{
				State = 51;
				instruccion();
				}
				}
				State = 56;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstruccionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionVariableContext declaracionVariable() {
			return GetRuleContext<DeclaracionVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionSliceContext declaracionSlice() {
			return GetRuleContext<DeclaracionSliceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AsignacionContext asignacion() {
			return GetRuleContext<AsignacionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Instruccion_ifContext instruccion_if() {
			return GetRuleContext<Instruccion_ifContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Instruccion_switchContext instruccion_switch() {
			return GetRuleContext<Instruccion_switchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Instruccion_forContext instruccion_for() {
			return GetRuleContext<Instruccion_forContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Instruccion_funcionContext instruccion_funcion() {
			return GetRuleContext<Instruccion_funcionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Llamada_funcionContext llamada_funcion() {
			return GetRuleContext<Llamada_funcionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakInstrContext breakInstr() {
			return GetRuleContext<BreakInstrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueInstrContext continueInstr() {
			return GetRuleContext<ContinueInstrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnInstrContext returnInstr() {
			return GetRuleContext<ReturnInstrContext>(0);
		}
		public InstruccionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruccion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterInstruccion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitInstruccion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruccion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstruccionContext instruccion() {
		InstruccionContext _localctx = new InstruccionContext(Context, State);
		EnterRule(_localctx, 4, RULE_instruccion);
		try {
			State = 69;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 57;
				print();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 58;
				declaracionVariable();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 59;
				declaracionSlice();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 60;
				asignacion();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 61;
				instruccion_if();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 62;
				instruccion_switch();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 63;
				instruccion_for();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 64;
				instruccion_funcion();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 65;
				llamada_funcion();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 66;
				breakInstr();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 67;
				continueInstr();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 68;
				returnInstr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARIZQ() { return GetToken(AnalizadorLexicoParser.PARIZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARDER() { return GetToken(AnalizadorLexicoParser.PARDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMA() { return GetTokens(AnalizadorLexicoParser.COMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMA(int i) {
			return GetToken(AnalizadorLexicoParser.COMA, i);
		}
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 6, RULE_print);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			Match(T__0);
			State = 72;
			Match(PARIZQ);
			State = 73;
			expr(0);
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMA) {
				{
				{
				State = 74;
				Match(COMA);
				State = 75;
				expr(0);
				}
				}
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 81;
			Match(PARDER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaracionVariableContext : ParserRuleContext {
		public DeclaracionVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaracionVariable; } }
	 
		public DeclaracionVariableContext() { }
		public virtual void CopyFrom(DeclaracionVariableContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclaracionVarContext : DeclaracionVariableContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorLexicoParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUAL() { return GetToken(AnalizadorLexicoParser.IGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DeclaracionVarContext(DeclaracionVariableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterDeclaracionVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitDeclaracionVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracionVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaracionVariableContext declaracionVariable() {
		DeclaracionVariableContext _localctx = new DeclaracionVariableContext(Context, State);
		EnterRule(_localctx, 8, RULE_declaracionVariable);
		int _la;
		try {
			_localctx = new DeclaracionVarContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			Match(T__1);
			State = 84;
			Match(ID);
			State = 85;
			tipo();
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGUAL) {
				{
				State = 86;
				Match(IGUAL);
				State = 87;
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaracionSliceContext : ParserRuleContext {
		public DeclaracionSliceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaracionSlice; } }
	 
		public DeclaracionSliceContext() { }
		public virtual void CopyFrom(DeclaracionSliceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclaracionSliceVacioContext : DeclaracionSliceContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorLexicoParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CORIZQ() { return GetToken(AnalizadorLexicoParser.CORIZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CORDER() { return GetToken(AnalizadorLexicoParser.CORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		public DeclaracionSliceVacioContext(DeclaracionSliceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterDeclaracionSliceVacio(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitDeclaracionSliceVacio(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracionSliceVacio(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclaracionSliceLlenoContext : DeclaracionSliceContext {
		public IToken signo;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorLexicoParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CORIZQ() { return GetToken(AnalizadorLexicoParser.CORIZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CORDER() { return GetToken(AnalizadorLexicoParser.CORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVEIZQ() { return GetToken(AnalizadorLexicoParser.LLAVEIZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVEDER() { return GetToken(AnalizadorLexicoParser.LLAVEDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUAL() { return GetToken(AnalizadorLexicoParser.IGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DPIGUAL() { return GetToken(AnalizadorLexicoParser.DPIGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMA() { return GetTokens(AnalizadorLexicoParser.COMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMA(int i) {
			return GetToken(AnalizadorLexicoParser.COMA, i);
		}
		public DeclaracionSliceLlenoContext(DeclaracionSliceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterDeclaracionSliceLleno(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitDeclaracionSliceLleno(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaracionSliceLleno(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaracionSliceContext declaracionSlice() {
		DeclaracionSliceContext _localctx = new DeclaracionSliceContext(Context, State);
		EnterRule(_localctx, 10, RULE_declaracionSlice);
		int _la;
		try {
			State = 111;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				_localctx = new DeclaracionSliceVacioContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 90;
				Match(T__1);
				State = 91;
				Match(ID);
				State = 92;
				Match(CORIZQ);
				State = 93;
				Match(CORDER);
				State = 94;
				tipo();
				}
				break;
			case ID:
				_localctx = new DeclaracionSliceLlenoContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 95;
				Match(ID);
				State = 96;
				((DeclaracionSliceLlenoContext)_localctx).signo = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==IGUAL || _la==DPIGUAL) ) {
					((DeclaracionSliceLlenoContext)_localctx).signo = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 97;
				Match(CORIZQ);
				State = 98;
				Match(CORDER);
				State = 99;
				tipo();
				State = 100;
				Match(LLAVEIZQ);
				State = 101;
				expr(0);
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMA) {
					{
					{
					State = 102;
					Match(COMA);
					State = 103;
					expr(0);
					}
					}
					State = 108;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 109;
				Match(LLAVEDER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsignacionContext : ParserRuleContext {
		public AsignacionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asignacion; } }
	 
		public AsignacionContext() { }
		public virtual void CopyFrom(AsignacionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SliceUpdateContext : AsignacionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorLexicoParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CORIZQ() { return GetToken(AnalizadorLexicoParser.CORIZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CORDER() { return GetToken(AnalizadorLexicoParser.CORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUAL() { return GetToken(AnalizadorLexicoParser.IGUAL, 0); }
		public SliceUpdateContext(AsignacionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterSliceUpdate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitSliceUpdate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AsignacionVarContext : AsignacionContext {
		public IToken signo;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorLexicoParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUAL() { return GetToken(AnalizadorLexicoParser.IGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DPIGUAL() { return GetToken(AnalizadorLexicoParser.DPIGUAL, 0); }
		public AsignacionVarContext(AsignacionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterAsignacionVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitAsignacionVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsignacionVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IncrementoDecrementoContext : AsignacionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorLexicoParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCRE() { return GetToken(AnalizadorLexicoParser.INCRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECRE() { return GetToken(AnalizadorLexicoParser.DECRE, 0); }
		public IncrementoDecrementoContext(AsignacionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterIncrementoDecremento(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitIncrementoDecremento(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrementoDecremento(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AsignacionIncrementoContext : AsignacionContext {
		public IToken operador;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorLexicoParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AsignacionIncrementoContext(AsignacionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterAsignacionIncremento(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitAsignacionIncremento(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsignacionIncremento(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AsignacionSliceContext : AsignacionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(AnalizadorLexicoParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(AnalizadorLexicoParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUAL() { return GetToken(AnalizadorLexicoParser.IGUAL, 0); }
		public AsignacionSliceContext(AsignacionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterAsignacionSlice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitAsignacionSlice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsignacionSlice(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AppendContext : AsignacionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(AnalizadorLexicoParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(AnalizadorLexicoParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUAL() { return GetToken(AnalizadorLexicoParser.IGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARIZQ() { return GetToken(AnalizadorLexicoParser.PARIZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMA() { return GetTokens(AnalizadorLexicoParser.COMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMA(int i) {
			return GetToken(AnalizadorLexicoParser.COMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARDER() { return GetToken(AnalizadorLexicoParser.PARDER, 0); }
		public AppendContext(AsignacionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterAppend(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitAppend(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppend(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsignacionContext asignacion() {
		AsignacionContext _localctx = new AsignacionContext(Context, State);
		EnterRule(_localctx, 12, RULE_asignacion);
		int _la;
		try {
			State = 149;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				_localctx = new AsignacionVarContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 113;
				Match(ID);
				State = 114;
				((AsignacionVarContext)_localctx).signo = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==IGUAL || _la==DPIGUAL) ) {
					((AsignacionVarContext)_localctx).signo = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 115;
				expr(0);
				}
				break;
			case 2:
				_localctx = new AsignacionIncrementoContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 116;
				Match(ID);
				State = 117;
				((AsignacionIncrementoContext)_localctx).operador = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==T__2 || _la==T__3) ) {
					((AsignacionIncrementoContext)_localctx).operador = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 118;
				expr(0);
				}
				break;
			case 3:
				_localctx = new AsignacionSliceContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 119;
				Match(ID);
				State = 120;
				Match(IGUAL);
				State = 121;
				Match(ID);
				}
				break;
			case 4:
				_localctx = new AppendContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 122;
				Match(ID);
				State = 123;
				Match(IGUAL);
				State = 124;
				Match(T__4);
				State = 125;
				Match(PARIZQ);
				State = 126;
				Match(ID);
				State = 127;
				Match(COMA);
				State = 128;
				expr(0);
				State = 133;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMA) {
					{
					{
					State = 129;
					Match(COMA);
					State = 130;
					expr(0);
					}
					}
					State = 135;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 136;
				Match(PARDER);
				}
				break;
			case 5:
				_localctx = new SliceUpdateContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 138;
				Match(ID);
				State = 139;
				Match(CORIZQ);
				State = 140;
				expr(0);
				State = 141;
				Match(CORDER);
				State = 142;
				Match(IGUAL);
				State = 143;
				expr(0);
				}
				break;
			case 6:
				_localctx = new IncrementoDecrementoContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 145;
				Match(ID);
				State = 146;
				Match(INCRE);
				}
				break;
			case 7:
				_localctx = new IncrementoDecrementoContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 147;
				Match(ID);
				State = 148;
				Match(DECRE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TipoContext : ParserRuleContext {
		public TipoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tipo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterTipo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitTipo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTipo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TipoContext tipo() {
		TipoContext _localctx = new TipoContext(Context, State);
		EnterRule(_localctx, 14, RULE_tipo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1984L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instruccion_ifContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVEIZQ() { return GetToken(AnalizadorLexicoParser.LLAVEIZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListaInstrContext listaInstr() {
			return GetRuleContext<ListaInstrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVEDER() { return GetToken(AnalizadorLexicoParser.LLAVEDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Instruccion_ifelseContext[] instruccion_ifelse() {
			return GetRuleContexts<Instruccion_ifelseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Instruccion_ifelseContext instruccion_ifelse(int i) {
			return GetRuleContext<Instruccion_ifelseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Instruccion_elseContext instruccion_else() {
			return GetRuleContext<Instruccion_elseContext>(0);
		}
		public Instruccion_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruccion_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterInstruccion_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitInstruccion_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruccion_if(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Instruccion_ifContext instruccion_if() {
		Instruccion_ifContext _localctx = new Instruccion_ifContext(Context, State);
		EnterRule(_localctx, 16, RULE_instruccion_if);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			Match(T__10);
			State = 154;
			expr(0);
			State = 155;
			Match(LLAVEIZQ);
			State = 156;
			listaInstr();
			State = 157;
			Match(LLAVEDER);
			State = 161;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 158;
					instruccion_ifelse();
					}
					} 
				}
				State = 163;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 164;
				instruccion_else();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instruccion_ifelseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVEIZQ() { return GetToken(AnalizadorLexicoParser.LLAVEIZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListaInstrContext listaInstr() {
			return GetRuleContext<ListaInstrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVEDER() { return GetToken(AnalizadorLexicoParser.LLAVEDER, 0); }
		public Instruccion_ifelseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruccion_ifelse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterInstruccion_ifelse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitInstruccion_ifelse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruccion_ifelse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Instruccion_ifelseContext instruccion_ifelse() {
		Instruccion_ifelseContext _localctx = new Instruccion_ifelseContext(Context, State);
		EnterRule(_localctx, 18, RULE_instruccion_ifelse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			Match(T__11);
			State = 168;
			Match(T__10);
			State = 169;
			expr(0);
			State = 170;
			Match(LLAVEIZQ);
			State = 171;
			listaInstr();
			State = 172;
			Match(LLAVEDER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instruccion_elseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVEIZQ() { return GetToken(AnalizadorLexicoParser.LLAVEIZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListaInstrContext listaInstr() {
			return GetRuleContext<ListaInstrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVEDER() { return GetToken(AnalizadorLexicoParser.LLAVEDER, 0); }
		public Instruccion_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruccion_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterInstruccion_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitInstruccion_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruccion_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Instruccion_elseContext instruccion_else() {
		Instruccion_elseContext _localctx = new Instruccion_elseContext(Context, State);
		EnterRule(_localctx, 20, RULE_instruccion_else);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			Match(T__11);
			State = 175;
			Match(LLAVEIZQ);
			State = 176;
			listaInstr();
			State = 177;
			Match(LLAVEDER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instruccion_switchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVEIZQ() { return GetToken(AnalizadorLexicoParser.LLAVEIZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVEDER() { return GetToken(AnalizadorLexicoParser.LLAVEDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Lista_caseContext lista_case() {
			return GetRuleContext<Lista_caseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Instruccion_defaultContext instruccion_default() {
			return GetRuleContext<Instruccion_defaultContext>(0);
		}
		public Instruccion_switchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruccion_switch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterInstruccion_switch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitInstruccion_switch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruccion_switch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Instruccion_switchContext instruccion_switch() {
		Instruccion_switchContext _localctx = new Instruccion_switchContext(Context, State);
		EnterRule(_localctx, 22, RULE_instruccion_switch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			Match(T__12);
			State = 180;
			expr(0);
			State = 181;
			Match(LLAVEIZQ);
			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 182;
				lista_case();
				}
			}

			State = 186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 185;
				instruccion_default();
				}
			}

			State = 188;
			Match(LLAVEDER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lista_caseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Instruccion_caseContext[] instruccion_case() {
			return GetRuleContexts<Instruccion_caseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Instruccion_caseContext instruccion_case(int i) {
			return GetRuleContext<Instruccion_caseContext>(i);
		}
		public Lista_caseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lista_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterLista_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitLista_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLista_case(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lista_caseContext lista_case() {
		Lista_caseContext _localctx = new Lista_caseContext(Context, State);
		EnterRule(_localctx, 24, RULE_lista_case);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 190;
				instruccion_case();
				}
				}
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__13 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instruccion_caseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListaInstrContext listaInstr() {
			return GetRuleContext<ListaInstrContext>(0);
		}
		public Instruccion_caseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruccion_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterInstruccion_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitInstruccion_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruccion_case(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Instruccion_caseContext instruccion_case() {
		Instruccion_caseContext _localctx = new Instruccion_caseContext(Context, State);
		EnterRule(_localctx, 26, RULE_instruccion_case);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			Match(T__13);
			State = 196;
			expr(0);
			State = 197;
			Match(T__14);
			State = 198;
			listaInstr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instruccion_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListaInstrContext listaInstr() {
			return GetRuleContext<ListaInstrContext>(0);
		}
		public Instruccion_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruccion_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterInstruccion_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitInstruccion_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruccion_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Instruccion_defaultContext instruccion_default() {
		Instruccion_defaultContext _localctx = new Instruccion_defaultContext(Context, State);
		EnterRule(_localctx, 28, RULE_instruccion_default);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			Match(T__15);
			State = 201;
			Match(T__14);
			State = 202;
			listaInstr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instruccion_forContext : ParserRuleContext {
		public Instruccion_forContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruccion_for; } }
	 
		public Instruccion_forContext() { }
		public virtual void CopyFrom(Instruccion_forContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ForRangeContext : Instruccion_forContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(AnalizadorLexicoParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(AnalizadorLexicoParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMA() { return GetToken(AnalizadorLexicoParser.COMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DPIGUAL() { return GetToken(AnalizadorLexicoParser.DPIGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVEIZQ() { return GetToken(AnalizadorLexicoParser.LLAVEIZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListaInstrContext listaInstr() {
			return GetRuleContext<ListaInstrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVEDER() { return GetToken(AnalizadorLexicoParser.LLAVEDER, 0); }
		public ForRangeContext(Instruccion_forContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterForRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitForRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForRange(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForIncrementoContext : Instruccion_forContext {
		[System.Diagnostics.DebuggerNonUserCode] public AsignacionContext[] asignacion() {
			return GetRuleContexts<AsignacionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AsignacionContext asignacion(int i) {
			return GetRuleContext<AsignacionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVEIZQ() { return GetToken(AnalizadorLexicoParser.LLAVEIZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListaInstrContext listaInstr() {
			return GetRuleContext<ListaInstrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVEDER() { return GetToken(AnalizadorLexicoParser.LLAVEDER, 0); }
		public ForIncrementoContext(Instruccion_forContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterForIncremento(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitForIncremento(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForIncremento(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForNormalContext : Instruccion_forContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVEIZQ() { return GetToken(AnalizadorLexicoParser.LLAVEIZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListaInstrContext listaInstr() {
			return GetRuleContext<ListaInstrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVEDER() { return GetToken(AnalizadorLexicoParser.LLAVEDER, 0); }
		public ForNormalContext(Instruccion_forContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterForNormal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitForNormal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForNormal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Instruccion_forContext instruccion_for() {
		Instruccion_forContext _localctx = new Instruccion_forContext(Context, State);
		EnterRule(_localctx, 30, RULE_instruccion_for);
		try {
			State = 231;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				_localctx = new ForNormalContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 204;
				Match(T__16);
				State = 205;
				expr(0);
				State = 206;
				Match(LLAVEIZQ);
				State = 207;
				listaInstr();
				State = 208;
				Match(LLAVEDER);
				}
				break;
			case 2:
				_localctx = new ForIncrementoContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 210;
				Match(T__16);
				State = 211;
				asignacion();
				State = 212;
				Match(T__17);
				State = 213;
				expr(0);
				State = 214;
				Match(T__17);
				State = 215;
				asignacion();
				State = 216;
				Match(LLAVEIZQ);
				State = 217;
				listaInstr();
				State = 218;
				Match(LLAVEDER);
				}
				break;
			case 3:
				_localctx = new ForRangeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 220;
				Match(T__16);
				State = 221;
				Match(ID);
				State = 222;
				Match(COMA);
				State = 223;
				Match(ID);
				State = 224;
				Match(DPIGUAL);
				State = 225;
				Match(T__18);
				State = 226;
				Match(ID);
				State = 227;
				Match(LLAVEIZQ);
				State = 228;
				listaInstr();
				State = 229;
				Match(LLAVEDER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instruccion_funcionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorLexicoParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARIZQ() { return GetToken(AnalizadorLexicoParser.PARIZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARDER() { return GetToken(AnalizadorLexicoParser.PARDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVEIZQ() { return GetToken(AnalizadorLexicoParser.LLAVEIZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListaInstrContext listaInstr() {
			return GetRuleContext<ListaInstrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVEDER() { return GetToken(AnalizadorLexicoParser.LLAVEDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Lista_parametrosContext lista_parametros() {
			return GetRuleContext<Lista_parametrosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		public Instruccion_funcionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruccion_funcion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterInstruccion_funcion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitInstruccion_funcion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruccion_funcion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Instruccion_funcionContext instruccion_funcion() {
		Instruccion_funcionContext _localctx = new Instruccion_funcionContext(Context, State);
		EnterRule(_localctx, 32, RULE_instruccion_funcion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			Match(T__19);
			State = 234;
			Match(ID);
			State = 235;
			Match(PARIZQ);
			State = 237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 89948572417523712L) != 0)) {
				{
				State = 236;
				lista_parametros();
				}
			}

			State = 239;
			Match(PARDER);
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1984L) != 0)) {
				{
				State = 240;
				tipo();
				}
			}

			State = 243;
			Match(LLAVEIZQ);
			State = 244;
			listaInstr();
			State = 245;
			Match(LLAVEDER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Llamada_funcionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorLexicoParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARIZQ() { return GetToken(AnalizadorLexicoParser.PARIZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARDER() { return GetToken(AnalizadorLexicoParser.PARDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Lista_argumentosContext lista_argumentos() {
			return GetRuleContext<Lista_argumentosContext>(0);
		}
		public Llamada_funcionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_llamada_funcion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterLlamada_funcion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitLlamada_funcion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLlamada_funcion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Llamada_funcionContext llamada_funcion() {
		Llamada_funcionContext _localctx = new Llamada_funcionContext(Context, State);
		EnterRule(_localctx, 34, RULE_llamada_funcion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			Match(ID);
			State = 248;
			Match(PARIZQ);
			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 89948572417523712L) != 0)) {
				{
				State = 249;
				lista_argumentos();
				}
			}

			State = 252;
			Match(PARDER);
			State = 254;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 253;
				Match(T__17);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lista_parametrosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext[] tipo() {
			return GetRuleContexts<TipoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo(int i) {
			return GetRuleContext<TipoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMA() { return GetTokens(AnalizadorLexicoParser.COMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMA(int i) {
			return GetToken(AnalizadorLexicoParser.COMA, i);
		}
		public Lista_parametrosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lista_parametros; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterLista_parametros(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitLista_parametros(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLista_parametros(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lista_parametrosContext lista_parametros() {
		Lista_parametrosContext _localctx = new Lista_parametrosContext(Context, State);
		EnterRule(_localctx, 36, RULE_lista_parametros);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			expr(0);
			State = 257;
			tipo();
			State = 264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMA) {
				{
				{
				State = 258;
				Match(COMA);
				State = 259;
				expr(0);
				State = 260;
				tipo();
				}
				}
				State = 266;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lista_argumentosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMA() { return GetTokens(AnalizadorLexicoParser.COMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMA(int i) {
			return GetToken(AnalizadorLexicoParser.COMA, i);
		}
		public Lista_argumentosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lista_argumentos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterLista_argumentos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitLista_argumentos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLista_argumentos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lista_argumentosContext lista_argumentos() {
		Lista_argumentosContext _localctx = new Lista_argumentosContext(Context, State);
		EnterRule(_localctx, 38, RULE_lista_argumentos);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			expr(0);
			State = 272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMA) {
				{
				{
				State = 268;
				Match(COMA);
				State = 269;
				expr(0);
				}
				}
				State = 274;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakInstrContext : ParserRuleContext {
		public BreakInstrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakInstr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterBreakInstr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitBreakInstr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakInstr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakInstrContext breakInstr() {
		BreakInstrContext _localctx = new BreakInstrContext(Context, State);
		EnterRule(_localctx, 40, RULE_breakInstr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueInstrContext : ParserRuleContext {
		public ContinueInstrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueInstr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterContinueInstr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitContinueInstr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueInstr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueInstrContext continueInstr() {
		ContinueInstrContext _localctx = new ContinueInstrContext(Context, State);
		EnterRule(_localctx, 42, RULE_continueInstr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnInstrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnInstrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnInstr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterReturnInstr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitReturnInstr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnInstr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnInstrContext returnInstr() {
		ReturnInstrContext _localctx = new ReturnInstrContext(Context, State);
		EnterRule(_localctx, 44, RULE_returnInstr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			Match(T__22);
			State = 281;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 280;
				expr(0);
				}
				break;
			}
			State = 284;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 283;
				Match(T__17);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BooleanExpresionContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(AnalizadorLexicoParser.BOOL, 0); }
		public BooleanExpresionContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterBooleanExpresion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitBooleanExpresion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanExpresion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StrconvParseFloatContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARIZQ() { return GetToken(AnalizadorLexicoParser.PARIZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARDER() { return GetToken(AnalizadorLexicoParser.PARDER, 0); }
		public StrconvParseFloatContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterStrconvParseFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitStrconvParseFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrconvParseFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeOfContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARIZQ() { return GetToken(AnalizadorLexicoParser.PARIZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARDER() { return GetToken(AnalizadorLexicoParser.PARDER, 0); }
		public TypeOfContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterTypeOf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitTypeOf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperadorLogicoContext : ExprContext {
		public ExprContext left;
		public IToken operador;
		public ExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OperadorLogicoContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterOperadorLogico(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitOperadorLogico(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperadorLogico(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpreParentesisContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARIZQ() { return GetToken(AnalizadorLexicoParser.PARIZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARDER() { return GetToken(AnalizadorLexicoParser.PARDER, 0); }
		public ExpreParentesisContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterExpreParentesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitExpreParentesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpreParentesis(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdExpresionContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorLexicoParser.ID, 0); }
		public IdExpresionContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterIdExpresion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitIdExpresion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdExpresion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SliceAccessContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AnalizadorLexicoParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CORIZQ() { return GetToken(AnalizadorLexicoParser.CORIZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CORDER() { return GetToken(AnalizadorLexicoParser.CORDER, 0); }
		public SliceAccessContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterSliceAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitSliceAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EjecutarFuncionesContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Llamada_funcionContext llamada_funcion() {
			return GetRuleContext<Llamada_funcionContext>(0);
		}
		public EjecutarFuncionesContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterEjecutarFunciones(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitEjecutarFunciones(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEjecutarFunciones(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StrconvAtoiContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARIZQ() { return GetToken(AnalizadorLexicoParser.PARIZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARDER() { return GetToken(AnalizadorLexicoParser.PARDER, 0); }
		public StrconvAtoiContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterStrconvAtoi(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitStrconvAtoi(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrconvAtoi(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringsJoinContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARIZQ() { return GetToken(AnalizadorLexicoParser.PARIZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMA() { return GetToken(AnalizadorLexicoParser.COMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CADENA() { return GetToken(AnalizadorLexicoParser.CADENA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARDER() { return GetToken(AnalizadorLexicoParser.PARDER, 0); }
		public StringsJoinContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterStringsJoin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitStringsJoin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringsJoin(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperadorNegacionContext : ExprContext {
		public ExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public OperadorNegacionContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterOperadorNegacion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitOperadorNegacion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperadorNegacion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaracterExpresionContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARACTER() { return GetToken(AnalizadorLexicoParser.CARACTER, 0); }
		public CaracterExpresionContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterCaracterExpresion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitCaracterExpresion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaracterExpresion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecimalExpresionContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(AnalizadorLexicoParser.DECIMAL, 0); }
		public DecimalExpresionContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterDecimalExpresion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitDecimalExpresion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalExpresion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NilExpresionContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NIL() { return GetToken(AnalizadorLexicoParser.NIL, 0); }
		public NilExpresionContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterNilExpresion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitNilExpresion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNilExpresion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SliceIndexContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARIZQ() { return GetToken(AnalizadorLexicoParser.PARIZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMA() { return GetToken(AnalizadorLexicoParser.COMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARDER() { return GetToken(AnalizadorLexicoParser.PARDER, 0); }
		public SliceIndexContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterSliceIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitSliceIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceIndex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CadenaExpresionContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CADENA() { return GetToken(AnalizadorLexicoParser.CADENA, 0); }
		public CadenaExpresionContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterCadenaExpresion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitCadenaExpresion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCadenaExpresion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LenContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARIZQ() { return GetToken(AnalizadorLexicoParser.PARIZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARDER() { return GetToken(AnalizadorLexicoParser.PARDER, 0); }
		public LenContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterLen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitLen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLen(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicacionYdivisionContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MultiplicacionYdivisionContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterMultiplicacionYdivision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitMultiplicacionYdivision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicacionYdivision(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntExpresionContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(AnalizadorLexicoParser.INT, 0); }
		public IntExpresionContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterIntExpresion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitIntExpresion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntExpresion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperadorRelacionalContext : ExprContext {
		public ExprContext left;
		public IToken operador;
		public ExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OperadorRelacionalContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterOperadorRelacional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitOperadorRelacional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperadorRelacional(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperadorNegativoContext : ExprContext {
		public ExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public OperadorNegativoContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterOperadorNegativo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitOperadorNegativo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperadorNegativo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SumaYrestaContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public SumaYrestaContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.EnterSumaYresta(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorLexicoListener typedListener = listener as IAnalizadorLexicoListener;
			if (typedListener != null) typedListener.ExitSumaYresta(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorLexicoVisitor<TResult> typedVisitor = visitor as IAnalizadorLexicoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumaYresta(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				_localctx = new ExpreParentesisContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 287;
				Match(PARIZQ);
				State = 288;
				expr(0);
				State = 289;
				Match(PARDER);
				}
				break;
			case 2:
				{
				_localctx = new IntExpresionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 291;
				Match(INT);
				}
				break;
			case 3:
				{
				_localctx = new DecimalExpresionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 292;
				Match(DECIMAL);
				}
				break;
			case 4:
				{
				_localctx = new CaracterExpresionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 293;
				Match(CARACTER);
				}
				break;
			case 5:
				{
				_localctx = new CadenaExpresionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 294;
				Match(CADENA);
				}
				break;
			case 6:
				{
				_localctx = new BooleanExpresionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 295;
				Match(BOOL);
				}
				break;
			case 7:
				{
				_localctx = new IdExpresionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 296;
				Match(ID);
				}
				break;
			case 8:
				{
				_localctx = new NilExpresionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 297;
				Match(NIL);
				}
				break;
			case 9:
				{
				_localctx = new OperadorNegacionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 298;
				Match(T__23);
				State = 299;
				((OperadorNegacionContext)_localctx).right = expr(20);
				}
				break;
			case 10:
				{
				_localctx = new OperadorNegativoContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 300;
				Match(T__24);
				State = 301;
				((OperadorNegativoContext)_localctx).right = expr(19);
				}
				break;
			case 11:
				{
				_localctx = new SliceIndexContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 302;
				Match(T__37);
				State = 303;
				Match(PARIZQ);
				State = 304;
				expr(0);
				State = 305;
				Match(COMA);
				State = 306;
				expr(0);
				State = 307;
				Match(PARDER);
				}
				break;
			case 12:
				{
				_localctx = new StringsJoinContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 309;
				Match(T__38);
				State = 310;
				Match(PARIZQ);
				State = 311;
				expr(0);
				State = 312;
				Match(COMA);
				State = 313;
				Match(CADENA);
				State = 314;
				Match(PARDER);
				}
				break;
			case 13:
				{
				_localctx = new LenContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 316;
				Match(T__39);
				State = 317;
				Match(PARIZQ);
				State = 318;
				expr(0);
				State = 319;
				Match(PARDER);
				}
				break;
			case 14:
				{
				_localctx = new SliceAccessContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 321;
				Match(ID);
				State = 322;
				Match(CORIZQ);
				State = 323;
				expr(0);
				State = 324;
				Match(CORDER);
				}
				break;
			case 15:
				{
				_localctx = new StrconvAtoiContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 326;
				Match(T__40);
				State = 327;
				Match(PARIZQ);
				State = 328;
				expr(0);
				State = 329;
				Match(PARDER);
				}
				break;
			case 16:
				{
				_localctx = new StrconvParseFloatContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 331;
				Match(T__41);
				State = 332;
				Match(PARIZQ);
				State = 333;
				expr(0);
				State = 334;
				Match(PARDER);
				}
				break;
			case 17:
				{
				_localctx = new TypeOfContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 336;
				Match(T__42);
				State = 337;
				Match(PARIZQ);
				State = 338;
				expr(0);
				State = 339;
				Match(PARDER);
				}
				break;
			case 18:
				{
				_localctx = new EjecutarFuncionesContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 341;
				llamada_funcion();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 376;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 374;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
					case 1:
						{
						_localctx = new MultiplicacionYdivisionContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 344;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 345;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 469762048L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 346;
						expr(19);
						}
						break;
					case 2:
						{
						_localctx = new SumaYrestaContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 347;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 348;
						_la = TokenStream.LA(1);
						if ( !(_la==T__24 || _la==T__28) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 349;
						expr(18);
						}
						break;
					case 3:
						{
						_localctx = new OperadorRelacionalContext(new ExprContext(_parentctx, _parentState));
						((OperadorRelacionalContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 350;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 351;
						((OperadorRelacionalContext)_localctx).operador = Match(T__29);
						State = 352;
						((OperadorRelacionalContext)_localctx).right = expr(17);
						}
						break;
					case 4:
						{
						_localctx = new OperadorRelacionalContext(new ExprContext(_parentctx, _parentState));
						((OperadorRelacionalContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 353;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 354;
						((OperadorRelacionalContext)_localctx).operador = Match(T__30);
						State = 355;
						((OperadorRelacionalContext)_localctx).right = expr(16);
						}
						break;
					case 5:
						{
						_localctx = new OperadorRelacionalContext(new ExprContext(_parentctx, _parentState));
						((OperadorRelacionalContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 356;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 357;
						((OperadorRelacionalContext)_localctx).operador = Match(T__31);
						State = 358;
						((OperadorRelacionalContext)_localctx).right = expr(15);
						}
						break;
					case 6:
						{
						_localctx = new OperadorRelacionalContext(new ExprContext(_parentctx, _parentState));
						((OperadorRelacionalContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 359;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 360;
						((OperadorRelacionalContext)_localctx).operador = Match(T__32);
						State = 361;
						((OperadorRelacionalContext)_localctx).right = expr(14);
						}
						break;
					case 7:
						{
						_localctx = new OperadorRelacionalContext(new ExprContext(_parentctx, _parentState));
						((OperadorRelacionalContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 362;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 363;
						((OperadorRelacionalContext)_localctx).operador = Match(T__33);
						State = 364;
						((OperadorRelacionalContext)_localctx).right = expr(13);
						}
						break;
					case 8:
						{
						_localctx = new OperadorRelacionalContext(new ExprContext(_parentctx, _parentState));
						((OperadorRelacionalContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 365;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 366;
						((OperadorRelacionalContext)_localctx).operador = Match(T__34);
						State = 367;
						((OperadorRelacionalContext)_localctx).right = expr(12);
						}
						break;
					case 9:
						{
						_localctx = new OperadorLogicoContext(new ExprContext(_parentctx, _parentState));
						((OperadorLogicoContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 368;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 369;
						((OperadorLogicoContext)_localctx).operador = Match(T__35);
						State = 370;
						((OperadorLogicoContext)_localctx).right = expr(11);
						}
						break;
					case 10:
						{
						_localctx = new OperadorLogicoContext(new ExprContext(_parentctx, _parentState));
						((OperadorLogicoContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 371;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 372;
						((OperadorLogicoContext)_localctx).operador = Match(T__36);
						State = 373;
						((OperadorLogicoContext)_localctx).right = expr(10);
						}
						break;
					}
					} 
				}
				State = 378;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 23: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 18);
		case 1: return Precpred(Context, 17);
		case 2: return Precpred(Context, 16);
		case 3: return Precpred(Context, 15);
		case 4: return Precpred(Context, 14);
		case 5: return Precpred(Context, 13);
		case 6: return Precpred(Context, 12);
		case 7: return Precpred(Context, 11);
		case 8: return Precpred(Context, 10);
		case 9: return Precpred(Context, 9);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,64,380,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,1,0,1,0,1,1,1,1,5,1,53,8,1,10,1,12,1,56,9,1,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,70,8,2,1,3,1,3,1,3,1,3,1,
		3,5,3,77,8,3,10,3,12,3,80,9,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,3,4,89,8,4,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,105,8,5,10,5,
		12,5,108,9,5,1,5,1,5,3,5,112,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
		6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,5,6,132,8,6,10,6,12,6,135,9,6,1,6,1,
		6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,150,8,6,1,7,1,7,1,8,
		1,8,1,8,1,8,1,8,1,8,5,8,160,8,8,10,8,12,8,163,9,8,1,8,3,8,166,8,8,1,9,
		1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,3,
		11,184,8,11,1,11,3,11,187,8,11,1,11,1,11,1,12,4,12,192,8,12,11,12,12,12,
		193,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,
		15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
		15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,232,8,15,1,16,1,16,1,16,
		1,16,3,16,238,8,16,1,16,1,16,3,16,242,8,16,1,16,1,16,1,16,1,16,1,17,1,
		17,1,17,3,17,251,8,17,1,17,1,17,3,17,255,8,17,1,18,1,18,1,18,1,18,1,18,
		1,18,5,18,263,8,18,10,18,12,18,266,9,18,1,19,1,19,1,19,5,19,271,8,19,10,
		19,12,19,274,9,19,1,20,1,20,1,21,1,21,1,22,1,22,3,22,282,8,22,1,22,3,22,
		285,8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,3,23,343,8,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
		1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
		1,23,1,23,1,23,1,23,1,23,1,23,5,23,375,8,23,10,23,12,23,378,9,23,1,23,
		0,1,46,24,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
		44,46,0,5,1,0,54,55,1,0,3,4,1,0,6,10,1,0,26,28,2,0,25,25,29,29,420,0,48,
		1,0,0,0,2,50,1,0,0,0,4,69,1,0,0,0,6,71,1,0,0,0,8,83,1,0,0,0,10,111,1,0,
		0,0,12,149,1,0,0,0,14,151,1,0,0,0,16,153,1,0,0,0,18,167,1,0,0,0,20,174,
		1,0,0,0,22,179,1,0,0,0,24,191,1,0,0,0,26,195,1,0,0,0,28,200,1,0,0,0,30,
		231,1,0,0,0,32,233,1,0,0,0,34,247,1,0,0,0,36,256,1,0,0,0,38,267,1,0,0,
		0,40,275,1,0,0,0,42,277,1,0,0,0,44,279,1,0,0,0,46,342,1,0,0,0,48,49,3,
		2,1,0,49,1,1,0,0,0,50,54,3,4,2,0,51,53,3,4,2,0,52,51,1,0,0,0,53,56,1,0,
		0,0,54,52,1,0,0,0,54,55,1,0,0,0,55,3,1,0,0,0,56,54,1,0,0,0,57,70,3,6,3,
		0,58,70,3,8,4,0,59,70,3,10,5,0,60,70,3,12,6,0,61,70,3,16,8,0,62,70,3,22,
		11,0,63,70,3,30,15,0,64,70,3,32,16,0,65,70,3,34,17,0,66,70,3,40,20,0,67,
		70,3,42,21,0,68,70,3,44,22,0,69,57,1,0,0,0,69,58,1,0,0,0,69,59,1,0,0,0,
		69,60,1,0,0,0,69,61,1,0,0,0,69,62,1,0,0,0,69,63,1,0,0,0,69,64,1,0,0,0,
		69,65,1,0,0,0,69,66,1,0,0,0,69,67,1,0,0,0,69,68,1,0,0,0,70,5,1,0,0,0,71,
		72,5,1,0,0,72,73,5,56,0,0,73,78,3,46,23,0,74,75,5,62,0,0,75,77,3,46,23,
		0,76,74,1,0,0,0,77,80,1,0,0,0,78,76,1,0,0,0,78,79,1,0,0,0,79,81,1,0,0,
		0,80,78,1,0,0,0,81,82,5,57,0,0,82,7,1,0,0,0,83,84,5,2,0,0,84,85,5,53,0,
		0,85,88,3,14,7,0,86,87,5,54,0,0,87,89,3,46,23,0,88,86,1,0,0,0,88,89,1,
		0,0,0,89,9,1,0,0,0,90,91,5,2,0,0,91,92,5,53,0,0,92,93,5,60,0,0,93,94,5,
		61,0,0,94,112,3,14,7,0,95,96,5,53,0,0,96,97,7,0,0,0,97,98,5,60,0,0,98,
		99,5,61,0,0,99,100,3,14,7,0,100,101,5,58,0,0,101,106,3,46,23,0,102,103,
		5,62,0,0,103,105,3,46,23,0,104,102,1,0,0,0,105,108,1,0,0,0,106,104,1,0,
		0,0,106,107,1,0,0,0,107,109,1,0,0,0,108,106,1,0,0,0,109,110,5,59,0,0,110,
		112,1,0,0,0,111,90,1,0,0,0,111,95,1,0,0,0,112,11,1,0,0,0,113,114,5,53,
		0,0,114,115,7,0,0,0,115,150,3,46,23,0,116,117,5,53,0,0,117,118,7,1,0,0,
		118,150,3,46,23,0,119,120,5,53,0,0,120,121,5,54,0,0,121,150,5,53,0,0,122,
		123,5,53,0,0,123,124,5,54,0,0,124,125,5,5,0,0,125,126,5,56,0,0,126,127,
		5,53,0,0,127,128,5,62,0,0,128,133,3,46,23,0,129,130,5,62,0,0,130,132,3,
		46,23,0,131,129,1,0,0,0,132,135,1,0,0,0,133,131,1,0,0,0,133,134,1,0,0,
		0,134,136,1,0,0,0,135,133,1,0,0,0,136,137,5,57,0,0,137,150,1,0,0,0,138,
		139,5,53,0,0,139,140,5,60,0,0,140,141,3,46,23,0,141,142,5,61,0,0,142,143,
		5,54,0,0,143,144,3,46,23,0,144,150,1,0,0,0,145,146,5,53,0,0,146,150,5,
		63,0,0,147,148,5,53,0,0,148,150,5,64,0,0,149,113,1,0,0,0,149,116,1,0,0,
		0,149,119,1,0,0,0,149,122,1,0,0,0,149,138,1,0,0,0,149,145,1,0,0,0,149,
		147,1,0,0,0,150,13,1,0,0,0,151,152,7,2,0,0,152,15,1,0,0,0,153,154,5,11,
		0,0,154,155,3,46,23,0,155,156,5,58,0,0,156,157,3,2,1,0,157,161,5,59,0,
		0,158,160,3,18,9,0,159,158,1,0,0,0,160,163,1,0,0,0,161,159,1,0,0,0,161,
		162,1,0,0,0,162,165,1,0,0,0,163,161,1,0,0,0,164,166,3,20,10,0,165,164,
		1,0,0,0,165,166,1,0,0,0,166,17,1,0,0,0,167,168,5,12,0,0,168,169,5,11,0,
		0,169,170,3,46,23,0,170,171,5,58,0,0,171,172,3,2,1,0,172,173,5,59,0,0,
		173,19,1,0,0,0,174,175,5,12,0,0,175,176,5,58,0,0,176,177,3,2,1,0,177,178,
		5,59,0,0,178,21,1,0,0,0,179,180,5,13,0,0,180,181,3,46,23,0,181,183,5,58,
		0,0,182,184,3,24,12,0,183,182,1,0,0,0,183,184,1,0,0,0,184,186,1,0,0,0,
		185,187,3,28,14,0,186,185,1,0,0,0,186,187,1,0,0,0,187,188,1,0,0,0,188,
		189,5,59,0,0,189,23,1,0,0,0,190,192,3,26,13,0,191,190,1,0,0,0,192,193,
		1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,25,1,0,0,0,195,196,5,14,0,
		0,196,197,3,46,23,0,197,198,5,15,0,0,198,199,3,2,1,0,199,27,1,0,0,0,200,
		201,5,16,0,0,201,202,5,15,0,0,202,203,3,2,1,0,203,29,1,0,0,0,204,205,5,
		17,0,0,205,206,3,46,23,0,206,207,5,58,0,0,207,208,3,2,1,0,208,209,5,59,
		0,0,209,232,1,0,0,0,210,211,5,17,0,0,211,212,3,12,6,0,212,213,5,18,0,0,
		213,214,3,46,23,0,214,215,5,18,0,0,215,216,3,12,6,0,216,217,5,58,0,0,217,
		218,3,2,1,0,218,219,5,59,0,0,219,232,1,0,0,0,220,221,5,17,0,0,221,222,
		5,53,0,0,222,223,5,62,0,0,223,224,5,53,0,0,224,225,5,55,0,0,225,226,5,
		19,0,0,226,227,5,53,0,0,227,228,5,58,0,0,228,229,3,2,1,0,229,230,5,59,
		0,0,230,232,1,0,0,0,231,204,1,0,0,0,231,210,1,0,0,0,231,220,1,0,0,0,232,
		31,1,0,0,0,233,234,5,20,0,0,234,235,5,53,0,0,235,237,5,56,0,0,236,238,
		3,36,18,0,237,236,1,0,0,0,237,238,1,0,0,0,238,239,1,0,0,0,239,241,5,57,
		0,0,240,242,3,14,7,0,241,240,1,0,0,0,241,242,1,0,0,0,242,243,1,0,0,0,243,
		244,5,58,0,0,244,245,3,2,1,0,245,246,5,59,0,0,246,33,1,0,0,0,247,248,5,
		53,0,0,248,250,5,56,0,0,249,251,3,38,19,0,250,249,1,0,0,0,250,251,1,0,
		0,0,251,252,1,0,0,0,252,254,5,57,0,0,253,255,5,18,0,0,254,253,1,0,0,0,
		254,255,1,0,0,0,255,35,1,0,0,0,256,257,3,46,23,0,257,264,3,14,7,0,258,
		259,5,62,0,0,259,260,3,46,23,0,260,261,3,14,7,0,261,263,1,0,0,0,262,258,
		1,0,0,0,263,266,1,0,0,0,264,262,1,0,0,0,264,265,1,0,0,0,265,37,1,0,0,0,
		266,264,1,0,0,0,267,272,3,46,23,0,268,269,5,62,0,0,269,271,3,46,23,0,270,
		268,1,0,0,0,271,274,1,0,0,0,272,270,1,0,0,0,272,273,1,0,0,0,273,39,1,0,
		0,0,274,272,1,0,0,0,275,276,5,21,0,0,276,41,1,0,0,0,277,278,5,22,0,0,278,
		43,1,0,0,0,279,281,5,23,0,0,280,282,3,46,23,0,281,280,1,0,0,0,281,282,
		1,0,0,0,282,284,1,0,0,0,283,285,5,18,0,0,284,283,1,0,0,0,284,285,1,0,0,
		0,285,45,1,0,0,0,286,287,6,23,-1,0,287,288,5,56,0,0,288,289,3,46,23,0,
		289,290,5,57,0,0,290,343,1,0,0,0,291,343,5,47,0,0,292,343,5,48,0,0,293,
		343,5,50,0,0,294,343,5,49,0,0,295,343,5,51,0,0,296,343,5,53,0,0,297,343,
		5,52,0,0,298,299,5,24,0,0,299,343,3,46,23,20,300,301,5,25,0,0,301,343,
		3,46,23,19,302,303,5,38,0,0,303,304,5,56,0,0,304,305,3,46,23,0,305,306,
		5,62,0,0,306,307,3,46,23,0,307,308,5,57,0,0,308,343,1,0,0,0,309,310,5,
		39,0,0,310,311,5,56,0,0,311,312,3,46,23,0,312,313,5,62,0,0,313,314,5,49,
		0,0,314,315,5,57,0,0,315,343,1,0,0,0,316,317,5,40,0,0,317,318,5,56,0,0,
		318,319,3,46,23,0,319,320,5,57,0,0,320,343,1,0,0,0,321,322,5,53,0,0,322,
		323,5,60,0,0,323,324,3,46,23,0,324,325,5,61,0,0,325,343,1,0,0,0,326,327,
		5,41,0,0,327,328,5,56,0,0,328,329,3,46,23,0,329,330,5,57,0,0,330,343,1,
		0,0,0,331,332,5,42,0,0,332,333,5,56,0,0,333,334,3,46,23,0,334,335,5,57,
		0,0,335,343,1,0,0,0,336,337,5,43,0,0,337,338,5,56,0,0,338,339,3,46,23,
		0,339,340,5,57,0,0,340,343,1,0,0,0,341,343,3,34,17,0,342,286,1,0,0,0,342,
		291,1,0,0,0,342,292,1,0,0,0,342,293,1,0,0,0,342,294,1,0,0,0,342,295,1,
		0,0,0,342,296,1,0,0,0,342,297,1,0,0,0,342,298,1,0,0,0,342,300,1,0,0,0,
		342,302,1,0,0,0,342,309,1,0,0,0,342,316,1,0,0,0,342,321,1,0,0,0,342,326,
		1,0,0,0,342,331,1,0,0,0,342,336,1,0,0,0,342,341,1,0,0,0,343,376,1,0,0,
		0,344,345,10,18,0,0,345,346,7,3,0,0,346,375,3,46,23,19,347,348,10,17,0,
		0,348,349,7,4,0,0,349,375,3,46,23,18,350,351,10,16,0,0,351,352,5,30,0,
		0,352,375,3,46,23,17,353,354,10,15,0,0,354,355,5,31,0,0,355,375,3,46,23,
		16,356,357,10,14,0,0,357,358,5,32,0,0,358,375,3,46,23,15,359,360,10,13,
		0,0,360,361,5,33,0,0,361,375,3,46,23,14,362,363,10,12,0,0,363,364,5,34,
		0,0,364,375,3,46,23,13,365,366,10,11,0,0,366,367,5,35,0,0,367,375,3,46,
		23,12,368,369,10,10,0,0,369,370,5,36,0,0,370,375,3,46,23,11,371,372,10,
		9,0,0,372,373,5,37,0,0,373,375,3,46,23,10,374,344,1,0,0,0,374,347,1,0,
		0,0,374,350,1,0,0,0,374,353,1,0,0,0,374,356,1,0,0,0,374,359,1,0,0,0,374,
		362,1,0,0,0,374,365,1,0,0,0,374,368,1,0,0,0,374,371,1,0,0,0,375,378,1,
		0,0,0,376,374,1,0,0,0,376,377,1,0,0,0,377,47,1,0,0,0,378,376,1,0,0,0,25,
		54,69,78,88,106,111,133,149,161,165,183,186,193,231,237,241,250,254,264,
		272,281,284,342,374,376
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Proyecto_1.AnalizadorLexico
